<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Probabilistic Programming on Data Artificer and code:Breaker</title><link>https://n1o.github.io/tags/probabilistic-programming/</link><description>Recent content in Probabilistic Programming on Data Artificer and code:Breaker</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 17 Dec 2020 10:19:42 +0100</lastBuildDate><atom:link href="https://n1o.github.io/tags/probabilistic-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Hierarchical Probabilistic Matrix Factorization</title><link>https://n1o.github.io/posts/pooled_matrix_factorization/</link><pubDate>Thu, 17 Dec 2020 10:19:42 +0100</pubDate><guid>https://n1o.github.io/posts/pooled_matrix_factorization/</guid><description>&lt;p>Probabilistic Matrix factorization is a simple but useful model for matrix imputation. The main idea is to decompose a tall and wide matrix into a product of two matrices, one tall and thin and one short and wide.&lt;/p>
&lt;p>$$
R_{n\times m} = U_{m \times d} \cdot V_{d \times n}
$$&lt;/p>
&lt;p>&lt;img alt="Matrix Factorization" src="https://n1o.github.io/images/matrix_factorization.svg">&lt;/p>
&lt;p>If you are a Bayesian, you can express this model as:&lt;/p>
&lt;p>$$
R_{ij} \sim \mathcal{N}(u_i \cdot v_j^T, \sigma)
$$
$$
u_i \sim \mathcal{N}(\mu_u, \Sigma_u)
$$
$$
v_j \sim \mathcal{N}(\mu_v, \Sigma_v)
$$&lt;/p></description></item></channel></rss>