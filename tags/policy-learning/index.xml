<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Policy Learning on Data Artificer and code:Breaker</title><link>https://n1o.github.io/tags/policy-learning/</link><description>Recent content in Policy Learning on Data Artificer and code:Breaker</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 01 Apr 2025 08:44:11 +0200</lastBuildDate><atom:link href="https://n1o.github.io/tags/policy-learning/index.xml" rel="self" type="application/rss+xml"/><item><title>RL Bite: Monotonic Policy Improvement and Deriving Proximal Policy Optimization (PPO)</title><link>https://n1o.github.io/posts/rl-bite-policy-improvement/</link><pubDate>Tue, 01 Apr 2025 08:44:11 +0200</pubDate><guid>https://n1o.github.io/posts/rl-bite-policy-improvement/</guid><description>Abstract Link to heading A while ago we looked into Policy Gradient and Reinforce. Policy gradient is versatile and under mild conditions it is guaranteed to converge to a local minimum (if we choose the correct policy and step size). This is already a huge step up when compared to Q Learning, which may just diverge. However, we may still want stronger guarantees like monotonic improvement at each step.</description></item><item><title>RL Bite: Policy Gradient and Reinforce</title><link>https://n1o.github.io/posts/rl-bite-policy-gradient-and-reinforce/</link><pubDate>Sat, 08 Mar 2025 13:24:13 +0100</pubDate><guid>https://n1o.github.io/posts/rl-bite-policy-gradient-and-reinforce/</guid><description>Abstract Link to heading Till now we have considered only learning the Value or Q function and estimating the policy from those. In the next few posts, we are going to look into directly learning the policy. Why directly learn the policy? First, Q learning has a lot of issues involving the Deadly Triad; second, if we have continuous actions we cannot really use it; and lastly, Q learning always learns a deterministic policy, and in cases of partially observed stochastic environments (which is nearly always what we have), having a stochastic policy is proven to be better.</description></item></channel></rss>