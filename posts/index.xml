<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Data Artificer and code:Breaker</title><link>https://n1o.github.io/posts/</link><description>Recent content in Posts on Data Artificer and code:Breaker</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 21 Nov 2024 10:44:33 +0100</lastBuildDate><atom:link href="https://n1o.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Transform any LLMs to a powerful Encoder</title><link>https://n1o.github.io/posts/from-llms-to-sentence-embeddings/</link><pubDate>Thu, 21 Nov 2024 10:44:33 +0100</pubDate><guid>https://n1o.github.io/posts/from-llms-to-sentence-embeddings/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>In the last two years there has been a surge of Large Language Models. This is understandable, since LLMs are amazing at generating text, and a lot of things can be viewed as text. However, generation is not always all we need - sometimes we want to have semantically rich representations. In general, LLMs are not the best tool to get semantically rich representations, and even today models like BERT are used to achieve state of the art text embeddings. A natural question is to ask why BERT is so much better at embeddings than LLMs? Here are the two main reasons:&lt;/p></description></item><item><title>2025 Year of Zig</title><link>https://n1o.github.io/posts/2025-yearl-of-zig/</link><pubDate>Wed, 20 Nov 2024 08:31:40 +0100</pubDate><guid>https://n1o.github.io/posts/2025-yearl-of-zig/</guid><description>&lt;h1 id="intro">
 Intro
 &lt;a class="heading-link" href="#intro">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Programming languages come and go and during my 20 years of coding I have used many of them to at least some degree (more than just hello world). Thanks to &lt;a href="https://www.youtube.com/c/theprimeagen" class="external-link" target="_blank" rel="noopener">ThePrimeagen&lt;/a> I decided to take &lt;a href="https://ziglang.org/" class="external-link" target="_blank" rel="noopener">Zig&lt;/a> for a spin. And boy I really like it! Just look at the mascot:&lt;/p>
&lt;p>&lt;img src="https://n1o.github.io/images/zig_zero.png">&lt;/p>
&lt;p>Come on, a crocodile with a jetpack? How cool is that?&lt;/p>
&lt;h1 id="why-zig">
 Why Zig
 &lt;a class="heading-link" href="#why-zig">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Sure I would not invest a lot of time into anything that a full time YouTuber recommends. However, I was in search of a highly performant programming language that compiles to native code, has excellent C compatibility, and most importantly, is fun to write code in. If I look back at my past nearly 10 years, the most dominant languages I used were Python and Scala with a detour to Go, and some necessary evil of Javascript/Typescript (Thank god this was minimal). For a long time I thought Scala was the pinnacle of programming languages, it had everything: Classes, Traits, Pattern Matching, For Comprehension, Destructuring, Options, Eithers, Try, Monads, Monoids, EitherT, OptionT, Applicatives, Functors, Kleisli, &amp;hellip;. And the list goes on nearly forever. I felt extremely smart writing Scala, however that was also its demise. You can take 2 people with the same experience, and their Scala code could look like two different programming languages. And that is a serious issue - the last thing you need is a language that takes forever to onboard a new person to, especially if this person is already experienced with the language. After 5 years of full time Scala development, I was competent and comfortable, but was well aware that there was a lot to the language I did not know, and this feeling of constantly chasing mastery felt not really rewarding.&lt;/p></description></item><item><title>Distilling State Space Models from Transformers</title><link>https://n1o.github.io/posts/distilling-ssm-from-transformers/</link><pubDate>Mon, 28 Oct 2024 10:12:27 +0100</pubDate><guid>https://n1o.github.io/posts/distilling-ssm-from-transformers/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>It is notoriously expensive to train a Language Model from scratch, making independent research impossible and trying out new architectures extremely risky. Because of these costs, Transformer++ models like LLaMa, based on Rotary Embedding, SwiGLU, MLP, RMSNorm, without linear bias, sometimes with grouped query attention and/or sliding window attention, are the de facto standard, not because they are the best, but because they are proven to work! In previous posts I covered &lt;a href="https://n1o.github.io/posts/ssm-transformer-hybrids-guide/" >SSM-Transformer Hybrids&lt;/a>. The biggest benefit of hybridization is their reduced inference cost and minimal memory overhead due to reduced KV cache, and combining SSMs can Attention can make the model more expressive. The biggest obstacle of these models is that they need to be pretrained from scratch. For example &lt;a href="https://www.zyphra.com/post/zamba2-7b" class="external-link" target="_blank" rel="noopener">Zamba2 7B&lt;/a>, is a 7B model that was trained on 128 H100 GPUs for 50 days, bringing its pretraining costs to around 600K US dollars. This makes it one of the cheapest (but by far not weakest) SSM-Attention hybrids, however if we look into detail the model was trained only on 3T (+100B high quality for annealing) tokens. In comparison Llama3 was trained on 15T tokens, if we would apply the same number of tokens to Zamba we would end up with costs around 3M US dollars. It is not hard to see that these kinds of budgets are out of scope for any individual, but also out of scope for many medium sized research organizations and academia.&lt;/p></description></item><item><title>Illusion of State in SSMs like Mamba</title><link>https://n1o.github.io/posts/ssm-the-illusion/</link><pubDate>Mon, 14 Oct 2024 10:52:09 +0200</pubDate><guid>https://n1o.github.io/posts/ssm-the-illusion/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Last time we looked into the weak points of State Space Models (&lt;a href="https://n1o.github.io/posts/from-mamba-to-mamba2/" >Mamba, Mamba2&lt;/a>), especially when compared with Attention-Based models (LLama, GPT-like). They lack in terms of in-context learning. To alleviate this, we focused on &lt;a href="https://n1o.github.io/posts/ssm-transformer-hybrids-guide/" >SSM-Transformer Hybrids&lt;/a> and introduced multiple models that do this differently. Here we look into the expressivity of State Space Models from two formal perspectives. The first is from the perspective of Circuit complexity and later from the perspective of Formal Languages.&lt;/p></description></item><item><title>Mamba(2) and Transformer Hybrids: An Overview</title><link>https://n1o.github.io/posts/ssm-transformer-hybrids-guide/</link><pubDate>Wed, 18 Sep 2024 11:26:25 +0200</pubDate><guid>https://n1o.github.io/posts/ssm-transformer-hybrids-guide/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>We have already looked into &lt;a href="https://n1o.github.io/posts/from-mamba-to-mamba2/" >Mamba and Mamba2&lt;/a>. In terms of efficiency, with their linear complexity and the absence of Key-Value cache, they are a significant improvement over Attention-based models in terms of throughput and memory usage. However, not everything is perfect. Transformers have a certain advantage when it comes to in-context learning. In-context learning is the ability to adapt the model without retraining it. This is done by providing relevant (or not) context to the model in the form of a prompt.&lt;/p></description></item><item><title>Hydra a Double Headed Mamba</title><link>https://n1o.github.io/posts/hydra-a-double-headed-mamba/</link><pubDate>Thu, 29 Aug 2024 11:53:51 +0200</pubDate><guid>https://n1o.github.io/posts/hydra-a-double-headed-mamba/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>State Space Models are awesome, models like Mamba and Mamba2 boast unparalleled performance especially when it comes to long sequences. The only downside is that they are causal, which means they model one token at a time, looking only at past tokens. Bidirectional models like &lt;a href="https://codebreakers.re/articles/detail/bert-codebert-and-graphcodebert/" class="external-link" target="_blank" rel="noopener">Bert, CodeBERT and GraphCodeBERT&lt;/a> have been shown to excel when it comes to code understanding. One way to put it is that by looking into the past and the future simultaneously we can get a better understanding of what is happening. Hydra is a bidirectional extension of Mamba2 that builds upon solid mathematical foundations, instead of just naively taking two Mamba(2)&amp;rsquo;s, flipping one of them, and somehow combining them.&lt;/p></description></item><item><title>From Mamba to Mamba-2</title><link>https://n1o.github.io/posts/from-mamba-to-mamba2/</link><pubDate>Thu, 08 Aug 2024 09:57:32 +0200</pubDate><guid>https://n1o.github.io/posts/from-mamba-to-mamba2/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>This is not my first gig where I write about State Space Models. I already mentioned them &lt;a href="https://n1o.github.io/posts/hungry-hungry-hippos/" >here&lt;/a> and &lt;a href="https://n1o.github.io/posts/butterflies-monarchs-hyenas-and-lightning-fast-bert/" >here&lt;/a>. Now what is the deal with this Mamba(2) thing? They are proving to be an alternative to the strong Transformer++ architecture (Transformer++ models like LLaMa are based on Rotary Embedding, SwiGLU, MLP, RMSNorm, without linear bias, sometimes with grouped query attention and/or sliding window attention). Hold on, if this Transformer++ models work well, why do we need altneratives? There are multiple reason:&lt;/p></description></item><item><title>Butterflies, Monarchs, Hyenas, and Lightning Fast BERT</title><link>https://n1o.github.io/posts/butterflies-monarchs-hyenas-and-lightning-fast-bert/</link><pubDate>Fri, 12 Jul 2024 13:36:49 +0200</pubDate><guid>https://n1o.github.io/posts/butterflies-monarchs-hyenas-and-lightning-fast-bert/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>I have been working on a project of creating my own Large Language Model, as I am huge fan of T5, or to be more concrete I recognize the added value of having an Encoder-Decoder architecture. The biggest challenge, at least in my opinion, in training an LLM is the sheer computational costs required to do so. I was originally planning to take the Encoder introduced by &lt;a href="https://n1o.github.io/posts/longer-context-for-t5/" >ColT5&lt;/a> but than I came across of &lt;a href="https://hazyresearch.stanford.edu/blog/2024-05-20-m2-bert-retrieval" class="external-link" target="_blank" rel="noopener">M2 BERT&lt;/a> and suddenly I went down the rabbit hole of Structured Matrices, Butterflies, Monarch and Hyeans.&lt;/p></description></item><item><title>BinT5 and HexT5 or T5 and Binary Reverse Engineering</title><link>https://n1o.github.io/posts/t5-and-reverse-engineering/</link><pubDate>Wed, 12 Jun 2024 14:07:17 +0200</pubDate><guid>https://n1o.github.io/posts/t5-and-reverse-engineering/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>For a while now I have a new passion and that is binary reverse engineering and vulnerability exploitation. This interest has led me to create &lt;a href="https://codebreakers.re" class="external-link" target="_blank" rel="noopener">CodeBreakers&lt;/a>
a platform dedicated to applying machine learning to reverse engineering, vulnerability detection, exploitation, and other cybersecurity-related applications.&lt;/p>
&lt;p>I found two notable research papers where &lt;a href="https://n1o.github.io/posts/t5-the-old-new-thing/" >T5&lt;/a> has been applied to reverse engineering are &lt;a href="https://arxiv.org/abs/2301.01701" class="external-link" target="_blank" rel="noopener">BinT5&lt;/a> and &lt;a href="https://www.semanticscholar.org/paper/HexT5%3A-Unified-Pre-Training-for-Stripped-Binary-Xiong-Chen/04c3fccfe01f42afe18dcdb027385f350ab3c9d1" class="external-link" target="_blank" rel="noopener">HexT5&lt;/a>. Before we dive deep into the details of these papers, let&amp;rsquo;s first explore the basics of reverse engineering.&lt;/p></description></item><item><title>CodeT5 and CodeT5+</title><link>https://n1o.github.io/posts/code-t5-plus/</link><pubDate>Sat, 01 Jun 2024 08:46:43 +0200</pubDate><guid>https://n1o.github.io/posts/code-t5-plus/</guid><description>&lt;h1 id="abstract">
 Abstract
 &lt;a class="heading-link" href="#abstract">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>In a previous post, &lt;a href="https://n1o.github.io/posts/t5-the-old-new-thing/" >T5 the Old New Thing&lt;/a>, we briefly touched upon CodeT5 and CodeT5+. Now, we aim to dive deeper into these topics.&lt;/p>
&lt;p>I have previously explored &lt;a href="https://codebreakers.re/articles/detail/bert-codebert-and-graphcodebert/" class="external-link" target="_blank" rel="noopener">CodeBERT and GraphCodeBERT&lt;/a>. These models, based on &lt;a href="https://arxiv.org/abs/1810.04805" class="external-link" target="_blank" rel="noopener">BERT&lt;/a> and &lt;a href="https://arxiv.org/abs/1907.11692" class="external-link" target="_blank" rel="noopener">RoBERTa&lt;/a> architectures, excel at code understanding and retrieval tasks. However, they fall short when it comes to code generation tasks. It&amp;rsquo;s worth noting that these models share a common theme: they utilize unique pretraining objectives tailored specifically for source code.&lt;/p></description></item><item><title>Longer Context for T5</title><link>https://n1o.github.io/posts/longer-context-for-t5/</link><pubDate>Mon, 29 Apr 2024 14:10:36 +0200</pubDate><guid>https://n1o.github.io/posts/longer-context-for-t5/</guid><description>&lt;h1 id="why-does-t5-need-a-longer-context">
 Why does T5 need a longer context?
 &lt;a class="heading-link" href="#why-does-t5-need-a-longer-context">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>In my previous post
&lt;a href="https://n1o.github.io/posts/t5-the-old-new-thing/" >T5 the Old New Thing&lt;/a>
we already explored why T5 is awesome. But one downside is its limited context length of 512 tokens.
However, it does have a limitation - its context length is restricted to 512 tokens. This can&amp;rsquo;t be directly compared to the context length of a decoder-only model, as T5 is an encoder-decoder model. This means that the encoder can process an input of up to 512 tokens, and the decoder can generate an output of up to 512 tokens, making the total context length 1024 tokens. In this article, we will discuss two extensions:&lt;/p></description></item><item><title>T5 the Old New Thing</title><link>https://n1o.github.io/posts/t5-the-old-new-thing/</link><pubDate>Wed, 06 Mar 2024 12:58:32 +0100</pubDate><guid>https://n1o.github.io/posts/t5-the-old-new-thing/</guid><description>&lt;h1 id="why-t5">
 Why T5
 &lt;a class="heading-link" href="#why-t5">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>A couple of weeks ago I run into the following paper &lt;a href="https://arxiv.org/abs/2402.00841" class="external-link" target="_blank" rel="noopener">Tiny Titans&lt;/a>. It compares multiple smallish (up to 1B parameters) open source LLMs with bigger proprietary ones on meeting summarization. TLDR; the small models tend to perform worse in zero-shot setting as well after fine-tunnig than big ones. Except for FLAN-T5-Large which after finetuning performs way beyond its league, beating even the biggest proprietary models (GPT-3.5).&lt;/p></description></item><item><title>Nixos for Hobby Project</title><link>https://n1o.github.io/posts/nixos-for-hobby-project/</link><pubDate>Wed, 13 Sep 2023 13:09:10 +0200</pubDate><guid>https://n1o.github.io/posts/nixos-for-hobby-project/</guid><description>&lt;p>Lately, I&amp;rsquo;ve embarked on a side project: &lt;a href="https://codebreakers.re/courses/" class="external-link" target="_blank" rel="noopener">CodeBreakers&lt;/a>. It&amp;rsquo;s nothing too fancy, just a website where I plan to release videos and articles about my latest passions—Reverse Engineering and Binary Exploitation.&lt;/p>
&lt;p>Creating a website isn&amp;rsquo;t all that complex, and I&amp;rsquo;ve done it a couple of times before. The main challenge was deciding where and how to host it. Initially, I considered using &lt;a href="https://fly.io/" class="external-link" target="_blank" rel="noopener">Fly&lt;/a> ((which is a fantastic PaaS product with many built-in features), but ultimately, I opted for &lt;a href="hetzner.com" >Hetzner&lt;/a> and rented a virtual server.&lt;/p></description></item><item><title>Paper overview: Hungry Hungry Hippos: Towards Language Modeling with State Space Models</title><link>https://n1o.github.io/posts/hungry-hungry-hippos/</link><pubDate>Mon, 06 Feb 2023 09:39:03 +0100</pubDate><guid>https://n1o.github.io/posts/hungry-hungry-hippos/</guid><description>&lt;h1 id="high-level-overview">
 High level overview
 &lt;a class="heading-link" href="#high-level-overview">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>By combining State Space Models (SSMs) with Attention, we get a model that generates text more efficiently, with a speed increase of approximately 1.6 times. Additionally, this approach requires less paremters, enabling the development of larger models on existing hardware.&lt;/p>
&lt;h1 id="language-modeling-requirements">
 Language modeling requirements
 &lt;a class="heading-link" href="#language-modeling-requirements">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>The Transformer architecture, which forms the basis of ChatGPT, is riding high on the hype train due to its impressive performance. Although it is just a basic &lt;a href="ttps://d2l.ai/chapter_attention-mechanisms-and-transformers/transformer.html" >Transformer&lt;/a>, it has proven to be extremely effective. The reason for its success is explored in the paper &amp;ldquo;&lt;a href="https://transformer-circuits.pub/2022/in-context-learning-and-induction-heads/index.html" class="external-link" target="_blank" rel="noopener">In-Context Learning and Induction Heads&lt;/a>.&amp;rdquo; The authors argue that the majority of the in-context learning capacity of the Transformer architecture can be evaluated by two tests:&lt;/p></description></item><item><title>Paper overview: Continuous-Time Modeling of Counterfactual Outcomes Using Neural Controlled Differential Equations</title><link>https://n1o.github.io/posts/continuous-time-modeling-of-counterfatual-outcomes/</link><pubDate>Mon, 16 Jan 2023 17:37:36 +0100</pubDate><guid>https://n1o.github.io/posts/continuous-time-modeling-of-counterfatual-outcomes/</guid><description>&lt;h1 id="the-problem-it-solves">
 The problem it solves
 &lt;a class="heading-link" href="#the-problem-it-solves">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Imagine you have an irregullary sampled time series, where at various time points we perform interventions. These interventions may influence the dynamics of the timeseries. The question we want to answer is:&lt;/p>
&lt;p>&lt;em>If I perform a hypothetical sequence of interventions how will my time series evolve?&lt;/em>&lt;/p>
&lt;h1 id="an-example-and-some-details">
 An example and some details
 &lt;a class="heading-link" href="#an-example-and-some-details">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="example">
 Example
 &lt;a class="heading-link" href="#example">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>As a medical doctor in a hospital, if a patient has a high fever and is at risk of dying, a common practice is to measure their levels of C-reactive protein (CRP) to determine if they need antibiotics. If the CRP level is high, antibiotics are administered at a certain dosage. However, the effects of antibiotics may not be immediate and it may take some time before they show. In this scenario, the doctor would wait for some time and measure the patient&amp;rsquo;s CRP levels again.&lt;/p></description></item><item><title>Hierarchical Probabilistic Matrix Factorization</title><link>https://n1o.github.io/posts/pooled_matrix_factorization/</link><pubDate>Thu, 17 Dec 2020 10:19:42 +0100</pubDate><guid>https://n1o.github.io/posts/pooled_matrix_factorization/</guid><description>&lt;p>Probabilistic Matrix factorization is a simple but useful model for matrix imputation. The main idea is to decompose a tall and wide matrix into a product of two matrices, one tall and thin and one short and wide.&lt;/p>
&lt;p>$$
R_{n\times m} = U_{m \times d} \cdot V_{d \times n}
$$&lt;/p>
&lt;p>&lt;img alt="Matrix Factorization" src="https://n1o.github.io/images/matrix_factorization.svg">&lt;/p>
&lt;p>If you are a Bayesian, you can express this model as:&lt;/p>
&lt;p>$$
R_{ij} \sim \mathcal{N}(u_i \cdot v_j^T, \sigma)
$$
$$
u_i \sim \mathcal{N}(\mu_u, \Sigma_u)
$$
$$
v_j \sim \mathcal{N}(\mu_v, \Sigma_v)
$$&lt;/p></description></item></channel></rss>